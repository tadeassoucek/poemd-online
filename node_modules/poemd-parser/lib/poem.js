"use strict";
exports.__esModule = true;
exports.Document = exports.Poem = exports.SectionTitle = exports.Stanza = exports.Verse = void 0;
var utils_1 = require("./utils");
var config_1 = require("./config");
var htmlStyle = '<style>\n' +
    config_1.CONFIGURATION.indentation + 'header span {\n' +
    utils_1.repeat(config_1.CONFIGURATION.indentation, 2) + 'display: block;\n' +
    config_1.CONFIGURATION.indentation + '}\n' +
    config_1.CONFIGURATION.indentation + '.author, .date {\n' +
    utils_1.repeat(config_1.CONFIGURATION.indentation, 2) + 'margin-left: 3em;\n' +
    utils_1.repeat(config_1.CONFIGURATION.indentation, 2) + 'font-style: italic\n' +
    config_1.CONFIGURATION.indentation + '}\n' +
    config_1.CONFIGURATION.indentation + ".subtitle::before { content: '\\2014\\00a0' }\n" +
    config_1.CONFIGURATION.indentation + ".author::before { content: 'by ' }\n" +
    config_1.CONFIGURATION.indentation + ".date::before { content: 'on ' }\n" +
    config_1.CONFIGURATION.indentation + '.versephantom { color: transparent; user-select: none }\n' +
    config_1.CONFIGURATION.indentation + '.verseindent { margin-right: 2em }\n' +
    '</style>\n\n';
var Verse = /** @class */ (function () {
    function Verse(content, indentLevel, breakWith) {
        this.isBroken = false;
        this.indentLevel = 0;
        this.content = content;
        this.indentLevel = indentLevel;
        this.breakWith = breakWith;
    }
    Verse.prototype.clean = function () {
        this.content = utils_1.cleanString(this.content);
    };
    Verse.prototype.toLatex = function (last) {
        if (last === void 0) { last = false; }
        var modifiedContent = utils_1.escapeLatex(this.content);
        var s = '';
        if (this.breakWith)
            s = "\\versephantom{" + utils_1.escapeLatex(this.breakWith.content) + "}";
        else if (this.indentLevel)
            if (this.indentLevel == 1)
                s = '\\verseindent';
            else
                s = "\\verseindent[" + this.indentLevel + "]";
        return (s ? s + ' ' : '') + modifiedContent + ' ' +
            (last ? '' : (this.isBroken ? '\\brokenline' : '\\verseline') + '\n');
    };
    Verse.prototype.toHTML = function (last) {
        if (last === void 0) { last = false; }
        var modifiedContent = utils_1.escapeHTML(this.content);
        var s = '';
        if (this.breakWith)
            s = "<span class=\"versephantom\">" + utils_1.escapeHTML(this.breakWith.content) + "</span>";
        else if (this.indentLevel)
            s = utils_1.repeat('<span class="verseindent"></span>', this.indentLevel);
        return (s ? s + ' ' : '') + modifiedContent + ' ' +
            (last ? '' : '<br>' + '\n');
    };
    Verse.prototype.toString = function () {
        return utils_1.repeat(config_1.CONFIGURATION.indentation, this.indentLevel) +
            (this.breakWith ? utils_1.repeat(' ', this.breakWith.content.length + 1) : '') + this.content;
    };
    return Verse;
}());
exports.Verse = Verse;
var Stanza = /** @class */ (function () {
    function Stanza() {
        this.content = [];
    }
    Stanza.prototype.clean = function () {
        this.content.forEach(function (v) { return v.clean(); });
    };
    Stanza.prototype.toString = function () {
        return this.content.join('\n');
    };
    Stanza.prototype.toHTML = function () {
        var _this = this;
        return config_1.CONFIGURATION.indentation + "<p class=\"stanza\">\n" + this.content.map(function (v, i) { return utils_1.repeat(config_1.CONFIGURATION.indentation, 2) + v.toHTML(i == _this.content.length - 1); }).join('') + "\n" + config_1.CONFIGURATION.indentation + "</p>";
    };
    Stanza.prototype.toLatex = function () {
        var _this = this;
        return config_1.CONFIGURATION.indentation + "\\begin{stanza}\n" + this.content.map(function (v, i) { return utils_1.repeat(config_1.CONFIGURATION.indentation, 2) + v.toLatex(i == _this.content.length - 1); }).join('') + "\n" + config_1.CONFIGURATION.indentation + "\\end{stanza}";
    };
    return Stanza;
}());
exports.Stanza = Stanza;
var SectionTitle = /** @class */ (function () {
    function SectionTitle(content) {
        this.content = content;
    }
    SectionTitle.prototype.clean = function () {
        this.content = utils_1.cleanString(this.content);
    };
    SectionTitle.prototype.toLatex = function () {
        return config_1.CONFIGURATION.indentation + ("\\poemsectiontitle{" + utils_1.renderMD(utils_1.escapeLatex(this.content), 'latex') + "}");
    };
    SectionTitle.prototype.toHTML = function () {
        return config_1.CONFIGURATION.indentation + ("<h2>" + utils_1.renderMD(utils_1.escapeHTML(this.content), 'html') + "</h2>");
    };
    SectionTitle.prototype.toString = function () {
        return config_1.CONFIGURATION.indentation + this.content + '\n' + utils_1.repeat('-', this.content.length) + '\n';
    };
    return SectionTitle;
}());
exports.SectionTitle = SectionTitle;
var Poem = /** @class */ (function () {
    function Poem() {
        this.content = [];
        this.language = config_1.CONFIGURATION.defaults.language;
    }
    /**
     * Remove empty stanzas and trim all verses.
     */
    Poem.prototype.clean = function () {
        this.title = utils_1.cleanString(this.title);
        this.subtitle = utils_1.cleanString(this.subtitle);
        this.author = utils_1.cleanString(this.author);
        this.content = this.content.filter(function (s) { return s.content.length; });
        this.content.forEach(function (s) { return s.clean(); });
    };
    Poem.prototype.toString = function () {
        var header = '';
        if (this.title)
            header = this.title + '\n' + utils_1.repeat('=', this.title.length) + '\n';
        if (this.subtitle)
            header += this.subtitle + '\n';
        if (this.author)
            header += config_1.CONFIGURATION.indentation + 'by ' + this.author + '\n';
        if (this.date)
            header += config_1.CONFIGURATION.indentation +
                (this.date == 'auto' ? utils_1.getLatexDate() : this.date) + '\n';
        return (header ? header + '\n\n' : '') +
            this.content.join('\n\n');
    };
    Poem.prototype.toHTML = function (selfContained) {
        if (selfContained === void 0) { selfContained = false; }
        var s = '';
        if (selfContained)
            s += htmlStyle;
        if (this.title) {
            s += '<header>\n' +
                config_1.CONFIGURATION.indentation + '<h1>' + utils_1.renderMD(utils_1.escapeHTML(this.title), 'html') + '</h1>\n';
            if (this.subtitle)
                s += config_1.CONFIGURATION.indentation + '<span class="subtitle">' + utils_1.renderMD(utils_1.escapeHTML(this.subtitle), 'html') +
                    '</span>\n';
            if (this.author)
                s += config_1.CONFIGURATION.indentation + '<span class="author">' + utils_1.renderMD(utils_1.escapeHTML(this.author), 'html') +
                    '</span>\n';
            if (this.date) {
                var date = this.date;
                if (date == 'auto')
                    date = utils_1.getLatexDate();
                s += config_1.CONFIGURATION.indentation + '<span class="date">' + utils_1.renderMD(utils_1.escapeHTML(date), 'html') +
                    '</span>\n';
            }
            s += '</header>\n\n';
        }
        s += "<div class=\"poem\">\n" + utils_1.renderMD(this.content.map(function (s) { return s.toHTML(); }).join('\n'), 'html') + "\n</div>";
        return s;
    };
    Poem.prototype.toLatex = function () {
        var s = '\\begin{poem}\n';
        if (this.title)
            s += "\\poemtitle{" + utils_1.renderMD(utils_1.escapeLatex(this.title), 'latex') + "}\n";
        if (this.subtitle)
            s += "\\poemsubtitle{" + utils_1.renderMD(utils_1.escapeLatex(this.subtitle), 'latex') + "}\n";
        s += "\n" + utils_1.renderMD(this.content.map(function (s) { return s.toLatex(); }).join('\n\n'), 'latex') + "\n\n\\end{poem}";
        if (this.author)
            s += "\\attribution{" + utils_1.renderMD(utils_1.escapeLatex(this.author), 'latex') + "}\n";
        if (this.date)
            s += "\\poemdate{" + utils_1.renderMD(utils_1.escapeLatex(this.date), 'latex') + "}";
        return s;
    };
    return Poem;
}());
exports.Poem = Poem;
var Document = /** @class */ (function () {
    function Document() {
        this.poems = [];
        this.paper = config_1.CONFIGURATION.defaults.paper;
        this.fontSize = config_1.CONFIGURATION.defaults.fontSize;
    }
    Document.prototype.addPoem = function (poem) {
        this.poems.push(poem);
    };
    Document.prototype.clean = function () {
        this.poems.forEach(function (p) { return p.clean(); });
    };
    Document.prototype.getLatexClass = function () {
        var options = ['twoside', this.paper.toLowerCase() + 'paper', this.fontSize + 'pt'];
        return "\\documentclass[" + options.join(',') + "]{article}";
    };
    Document.prototype.toHTML = function (selfContained) {
        if (selfContained === void 0) { selfContained = false; }
        var s = '<!DOCTYPE html>\n\n' +
            '<html>\n\n';
        if (selfContained)
            s += '<head>\n\n' + htmlStyle + '</head>\n\n';
        s += '<body>\n\n';
        this.poems.forEach(function (p) { return s += p.toHTML(false) + '\n\n'; });
        s += '</body>\n\n</html>\n';
        return s;
    };
    Document.prototype.toLatex = function () {
        var s = this.getLatexClass() + '\n\n' +
            '\\usepackage[utf8]{inputenc}\n' +
            // `\\usepackage[${this.language}]{babel}\n` +
            '\\usepackage{ulem}\n' +
            '\\usepackage{fancyhdr}\n' +
            '\\usepackage{poemscol}\n' +
            '\\usepackage{ifthen}\n' +
            '\\usepackage[pass]{geometry}\n\n';
        s += '\\normalem\n' +
            '\\normaltitleindentationscheme\n\n' +
            '\\begin{document}\n\n';
        this.poems.forEach(function (p) { return s += p.toLatex() + '\n\n'; });
        s += '\\end{document}\n';
        return s;
    };
    return Document;
}());
exports.Document = Document;
//# sourceMappingURL=poem.js.map