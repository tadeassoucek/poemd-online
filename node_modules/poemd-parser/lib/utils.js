"use strict";
exports.__esModule = true;
exports.renderMD = exports.escapeHTML = exports.escapeLatex = exports.cleanString = exports.getLatexDate = exports.formatString = exports.getValues = exports.getKeys = exports.repeat = exports.getLast = exports.oneOf = void 0;
function oneOf(orig) {
    var vals = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        vals[_i - 1] = arguments[_i];
    }
    for (var _a = 0, vals_1 = vals; _a < vals_1.length; _a++) {
        var e = vals_1[_a];
        if (e == orig)
            return true;
    }
    return false;
}
exports.oneOf = oneOf;
function getLast(arr, offset) {
    if (offset === void 0) { offset = 0; }
    return arr[arr.length - 1 - offset];
}
exports.getLast = getLast;
function repeat(str, count) {
    var res = '';
    for (var i = 0; i < count; i++)
        res += str;
    return res;
}
exports.repeat = repeat;
/** ES3 compliant replacement for `Object.keys`. */
function getKeys(obj) {
    var res = [];
    for (var k in obj)
        res.push(k);
    return res;
}
exports.getKeys = getKeys;
/** ES3 compliant replacement for `Object.values`. */
function getValues(obj) {
    var res = [];
    for (var k in obj)
        res.push(obj[k]);
    return res;
}
exports.getValues = getValues;
function formatString(format, args) {
    var res = format;
    for (var key in args)
        res = res.replace(new RegExp("{" + key + "}", 'g'), args[key].toString());
    return res;
}
exports.formatString = formatString;
function getLatexDate() {
    var date = new Date();
    var month = new Intl.DateTimeFormat('en-US', { month: 'long' }).format(date);
    return month + " " + date.getDate() + ", " + date.getFullYear();
}
exports.getLatexDate = getLatexDate;
function cleanString(s) {
    return s == void 0 ? void 0 : s.trim().replace(/\s+/g, ' ');
}
exports.cleanString = cleanString;
function escapeLatex(s) {
    return (s !== null && s !== void 0 ? s : '')
        .replace(/\\/g, '\\textbackslash ')
        .replace(/\\textbackslash  /g, '\\textbackslash\\ ')
        .replace(/\^/g, '\\textasciicircum ')
        .replace(/\\textasciicircum  /g, '\\textasciicircum\\ ')
        .replace(/&/g, '\\&')
        .replace(/\$/g, '\\$')
        .replace(/#/g, '\\#')
        .replace(/{/g, '\\{')
        .replace(/}/g, '\\}')
        .replace(/%/g, '\\%')
        .replace(/\.\.\. /g, '\\ldots\\ ')
        .replace(/\.\.\./g, '\\ldots ');
}
exports.escapeLatex = escapeLatex;
function escapeHTML(s) {
    return (s !== null && s !== void 0 ? s : '')
        .replace(/</g, '&iexcl;')
        .replace(/>/g, '&iquest;')
        .replace(/&/g, '&amp;')
        .replace(/\\~/g, '&nbsp;')
        .replace(/\.\.\./g, '&hellip;')
        .replace(/---/g, '&mdash;')
        .replace(/--/g, '&ndash;')
        .replace(/``/g, '&ldquo;')
        .replace(/''/g, '&rdquo;')
        .replace(/,,/g, '&bdquo;')
        .replace(/`/g, '&lsquo;')
        .replace(/'/g, '&rsquo;');
}
exports.escapeHTML = escapeHTML;
function renderMD(s, lang) {
    s = (s !== null && s !== void 0 ? s : '')
        .replace(/~~(\S[\s\S]*?\S)~~/gm, lang == 'latex' ? '\\sout{$1}' : '<s>$1</s>')
        .replace(/__(\S[\s\S]*?\S)__/gm, lang == 'latex' ? '\\underline{$1}' : '<u>$1</u>')
        .replace(/\*\*(\S[\s\S]*?\S)\*\*/gm, lang == 'latex' ? '\\textbf{$1}' : '<strong>$1</strong>')
        .replace(/\*(\S[\s\S]*?\S)\*/gm, lang == 'latex' ? '\\emph{$1}' : '<em>$1</em>');
    if (lang == 'latex')
        s = s
            .replace(/_/g, '\\_')
            .replace(/~/g, '\\texttilde ')
            .replace(/\\textbackslash \\texttilde/g, '~')
            .replace(/\\texttilde  /g, '\\texttilde\\ ');
    return s;
}
exports.renderMD = renderMD;
//# sourceMappingURL=utils.js.map